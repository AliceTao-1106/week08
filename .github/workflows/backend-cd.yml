name: CD - Backend E2E (Test → Build → Deploy → Trigger Frontend)

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: '<aks_cluster_name>'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: '<resource_group_name>'
      aks_acr_name:
        description: 'Name of ACR'
        required: true
        default: '<acr_name>'

  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-cd.yml'

env:
  ACR_NAME: ${{ secrets.AZURE_ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}

  PRODUCT_SVC: product-service-w08e1
  ORDER_SVC:   order-service-w08e1

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      postgres-order:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      postgres-product:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies (Order)
        run: |
          pip install -r backend/order_service/requirements.txt
          pip install -r backend/order_service/requirements-dev.txt

      - name: Run tests (Order)
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest backend/order_service/tests/

      - name: Install dependencies (Product)
        run: |
          pip install -r backend/product_service/requirements.txt
          pip install -r backend/product_service/requirements-dev.txt

      - name: Run tests (Product)
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: products
        run: pytest backend/product_service/tests/

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR (registry name)
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Build & Push Product (latest + sha)
        run: |
          set -e
          docker build \
            -t ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} \
            -t ${{ env.ACR_LOGIN_SERVER }}/product_service:latest \
            ./backend/product_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:latest

      - name: Build & Push Order (latest + sha)
        run: |
          set -e
          docker build \
            -t ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }} \
            -t ${{ env.ACR_LOGIN_SERVER }}/order_service:latest \
            ./backend/order_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:latest

      - name: Logout Azure
        if: always()
        run: az logout

  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production
    needs: build_and_push_images

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: |
          AKS_RG="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.aks_resource_group || secrets.AKS_RESOURCE_GROUP }}"
          AKS_NAME="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.aks_cluster_name || secrets.AKS_CLUSTER_NAME }}"
          az aks get-credentials --resource-group "$AKS_RG" --name "$AKS_NAME" --overwrite-existing

      - name: Attach ACR
        run: |
          AKS_RG="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.aks_resource_group || secrets.AKS_RESOURCE_GROUP }}"
          AKS_NAME="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.aks_cluster_name || secrets.AKS_CLUSTER_NAME }}"
          ACR_NAME_INPUT="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.aks_acr_name || env.ACR_NAME }}"
          az aks update --name "$AKS_NAME" --resource-group "$AKS_RG" --attach-acr "$ACR_NAME_INPUT"

      - name: Apply backend manifests
        run: |
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-db.yaml
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml

      - name: Pin images by SHA
        shell: bash
        run: |
          set -euo pipefail

          PROD_DEP="${{ env.PRODUCT_SVC }}"
          ORD_DEP="${{ env.ORDER_SVC }}"

          PROD_CTN=$(kubectl get deploy "$PROD_DEP" -o jsonpath='{.spec.template.spec.containers[0].name}')
          ORD_CTN=$(kubectl get deploy "$ORD_DEP"  -o jsonpath='{.spec.template.spec.containers[0].name}')

          echo "Product deployment : $PROD_DEP"
          echo "Product container  : $PROD_CTN"
          echo "Order   deployment : $ORD_DEP"
          echo "Order   container  : $ORD_CTN"

          kubectl set image deploy/"$PROD_DEP" "$PROD_CTN"=${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}
          kubectl set image deploy/"$ORD_DEP"  "$ORD_CTN"=${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}

          kubectl rollout status deploy/"$PROD_DEP" --timeout=5m
          kubectl rollout status deploy/"$ORD_DEP"  --timeout=5m

      - name: Wait for Backend LoadBalancer IPs
        run: |
          echo "Waiting up to 10 minutes for LB IPs..."
          for i in $(seq 1 120); do
            PRODUCT_IP=$(kubectl get svc ${{ env.PRODUCT_SVC }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get svc ${{ env.ORDER_SVC }}   -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
              echo "ORDER_IP=$ORDER_IP"     >> $GITHUB_ENV
              break
            fi
            sleep 5
          done
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then echo "IPs not assigned in time"; exit 1; fi

      - id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT
      - id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout Azure
        if: always()
        run: az logout

  deploy_frontend:
    needs: deploy_backend
    uses: ./.github/workflows/frontend-cd.yml
    with:
      product_api_ip: "http://${{ needs.deploy_backend.outputs.PRODUCT_API_IP }}:8000"
      order_api_ip:   "http://${{ needs.deploy_backend.outputs.ORDER_API_IP }}:8001"
      aks_cluster_name: ${{ secrets.AKS_CLUSTER_NAME }}
      aks_resource_group: ${{ secrets.AKS_RESOURCE_GROUP }}
    secrets: inherit

